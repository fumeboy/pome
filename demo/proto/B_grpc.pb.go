// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceBbClient is the client API for ServiceBb service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceBbClient interface {
	Do(ctx context.Context, in *ServiceBbDoRequest, opts ...grpc.CallOption) (*ServiceBbDoResponse, error)
	Do2(ctx context.Context, in *ServiceBbDoRequest, opts ...grpc.CallOption) (*ServiceBbDoResponse, error)
	Msg(ctx context.Context, in *ServiceBbMsgReq, opts ...grpc.CallOption) (*EmptyB, error)
	MsgProxy(ctx context.Context, in *ServiceBbMsgReq, opts ...grpc.CallOption) (*EmptyB, error)
}

type serviceBbClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceBbClient(cc grpc.ClientConnInterface) ServiceBbClient {
	return &serviceBbClient{cc}
}

func (c *serviceBbClient) Do(ctx context.Context, in *ServiceBbDoRequest, opts ...grpc.CallOption) (*ServiceBbDoResponse, error) {
	out := new(ServiceBbDoResponse)
	err := c.cc.Invoke(ctx, "/proto.ServiceBb/Do", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceBbClient) Do2(ctx context.Context, in *ServiceBbDoRequest, opts ...grpc.CallOption) (*ServiceBbDoResponse, error) {
	out := new(ServiceBbDoResponse)
	err := c.cc.Invoke(ctx, "/proto.ServiceBb/Do2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceBbClient) Msg(ctx context.Context, in *ServiceBbMsgReq, opts ...grpc.CallOption) (*EmptyB, error) {
	out := new(EmptyB)
	err := c.cc.Invoke(ctx, "/proto.ServiceBb/Msg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceBbClient) MsgProxy(ctx context.Context, in *ServiceBbMsgReq, opts ...grpc.CallOption) (*EmptyB, error) {
	out := new(EmptyB)
	err := c.cc.Invoke(ctx, "/proto.ServiceBb/MsgProxy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceBbServer is the server API for ServiceBb service.
// All implementations should embed UnimplementedServiceBbServer
// for forward compatibility
type ServiceBbServer interface {
	Do(context.Context, *ServiceBbDoRequest) (*ServiceBbDoResponse, error)
	Do2(context.Context, *ServiceBbDoRequest) (*ServiceBbDoResponse, error)
	Msg(context.Context, *ServiceBbMsgReq) (*EmptyB, error)
	MsgProxy(context.Context, *ServiceBbMsgReq) (*EmptyB, error)
}

// UnimplementedServiceBbServer should be embedded to have forward compatible implementations.
type UnimplementedServiceBbServer struct {
}

func (UnimplementedServiceBbServer) Do(context.Context, *ServiceBbDoRequest) (*ServiceBbDoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Do not implemented")
}
func (UnimplementedServiceBbServer) Do2(context.Context, *ServiceBbDoRequest) (*ServiceBbDoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Do2 not implemented")
}
func (UnimplementedServiceBbServer) Msg(context.Context, *ServiceBbMsgReq) (*EmptyB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Msg not implemented")
}
func (UnimplementedServiceBbServer) MsgProxy(context.Context, *ServiceBbMsgReq) (*EmptyB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgProxy not implemented")
}

// UnsafeServiceBbServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceBbServer will
// result in compilation errors.
type UnsafeServiceBbServer interface {
	mustEmbedUnimplementedServiceBbServer()
}

func RegisterServiceBbServer(s grpc.ServiceRegistrar, srv ServiceBbServer) {
	s.RegisterService(&ServiceBb_ServiceDesc, srv)
}

func _ServiceBb_Do_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceBbDoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceBbServer).Do(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ServiceBb/Do",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceBbServer).Do(ctx, req.(*ServiceBbDoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceBb_Do2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceBbDoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceBbServer).Do2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ServiceBb/Do2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceBbServer).Do2(ctx, req.(*ServiceBbDoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceBb_Msg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceBbMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceBbServer).Msg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ServiceBb/Msg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceBbServer).Msg(ctx, req.(*ServiceBbMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceBb_MsgProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceBbMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceBbServer).MsgProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ServiceBb/MsgProxy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceBbServer).MsgProxy(ctx, req.(*ServiceBbMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceBb_ServiceDesc is the grpc.ServiceDesc for ServiceBb service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceBb_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ServiceBb",
	HandlerType: (*ServiceBbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Do",
			Handler:    _ServiceBb_Do_Handler,
		},
		{
			MethodName: "Do2",
			Handler:    _ServiceBb_Do2_Handler,
		},
		{
			MethodName: "Msg",
			Handler:    _ServiceBb_Msg_Handler,
		},
		{
			MethodName: "MsgProxy",
			Handler:    _ServiceBb_MsgProxy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/B.proto",
}
